{"version":3,"sources":["components/rb-pin.js","components/rb-map.js","components/rb-supply-chain.js","components/rb-story-explorer.js","App.js","lib/helpers.js","serviceWorker.js","index.js"],"names":["pinStyle","fill","stroke","RBPin","_this$props$size","this","props","size","react_default","a","createElement","height","viewBox","style","d","PureComponent","RBMap","state","viewport","width","latitude","longitude","zoom","asset","assetName","locationName","value","location","_asset$location$0$coo","coordinates","_this2","arguments","length","undefined","assets","map","i","markerData","getAssetLocationData","esm","key","offsetTop","offsetLeft","onDragStart","_onMarkerDragStart","onDrag","_onMarkerDrag","onDragEnd","_onMarkerDragEnd","rb_pin_RBPin","_this3","className","Object","assign","scrollZoom","onViewportChange","setState","renderAssetsPins","Component","RBSupplyChain","concat","defaultProps","RBStoryExplorer","stories","selectedLocation","filter","story","toLowerCase","slice","getStorySelection","text","_this$props","renderFilteredStories","supplyChainData","storyData","flatStories","keys","forEach","k","input","stack","toConsumableArray","res","next","pop","Array","isArray","push","apply","reverse","flatten","modifiedStory","sort","b","score","transformStoryData","storiesData","console","log","App","rb_map_RBMap","lib","fluid","lg","components_rb_supply_chain","components_rb_story_explorer","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad2dd937.chunk.js","sourcesContent":["import React, {PureComponent} from 'react';\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\nconst pinStyle = {\n  fill: '#d00',\n  stroke: 'none'\n};\n\nexport default class RBPin extends PureComponent {\n\n  render() {\n    const {size = 20} = this.props;\n\n    return (\n      <svg\n        height={size}\n        viewBox=\"0 0 24 24\"\n        style={pinStyle}\n      >\n        <path d={ICON}/>\n      </svg>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport ReactMapGL, {Marker} from 'react-map-gl';\nimport RBPin from './rb-pin.js';\nimport '../styles/rb-map.scss';\n\nexport default class RBMap extends Component {\n\n  state = {\n    viewport: {\n      width: '100%',\n      height: 400,\n      latitude: 13.5605834,\n      longitude: 19.927948,\n      zoom: 1.56\n    }\n  };\n\n  getAssetLocationData(asset) {\n    // Just grabbing the first location, will have to revisit this\n    // when we have a better sense of our unit of analysis\n    const {assetName, value} = asset;\n    const locationName = asset.location[0].locationName;\n    const {latitude, longitude} = asset.location[0].coordinates[0];\n    return {\n      assetName,\n      latitude,\n      longitude,\n      locationName\n    };\n  }\n\n  renderAssetsPins(props=this.props) {\n    const {assets} = props;\n    return assets.map((asset, i) => {\n      const markerData = this.getAssetLocationData(asset);\n      const { longitude, latitude, assetName, value } = markerData;\n      return (\n        <Marker key={i} \n          latitude={latitude} longitude={longitude}\n          offsetTop={-20} offsetLeft={-10}\n          onDragStart={this._onMarkerDragStart}\n          onDrag={this._onMarkerDrag}\n          onDragEnd={this._onMarkerDragEnd}\n        >\n          <RBPin size={20} />\n        </Marker>\n      );\n    })\n  }\n\n  render() {\n    const {assets} = this.props;\n    return (\n      <div className=\"rb-map\">\n        <ReactMapGL\n          {...this.state.viewport}\n          scrollZoom={false}\n          onViewportChange={(viewport) => this.setState({viewport})}\n        >\n          {\n            this.renderAssetsPins(this.props)\n          }\n        </ReactMapGL>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport '../styles/rb-supply-chain.scss';\n\n/**\nsupplyChainData = [\n  {\n    location:[{\n        locationName: \"Location\",\n        coordinates: { lat: 0, long: 0 }\n      },..\n    ]\n    assets: \"Asset Name\",\n    value: \"int\",\n    description: \"description text\",\n  } ...\n];\n**/\n\nclass RBSupplyChain extends Component {\n  render() {\n    const {assets} = this.props;\n    return (\n      <div className=\"rb-supply-chain-wrapper\">\n        <div className=\"rb-supply-list\">\n          <h1>Supply Chain</h1>\n          <ul>\n            {assets.map((asset, i) => {\n              const assetName = asset.assetName;\n              const locationName = asset.location[0].locationName;\n              return (\n                <li key={i}>\n                  <i className=\"fas fa-caret-right rb-list-icon\"></i>\n                  {`${locationName} - ${assetName}`}\n                </li>);\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nRBSupplyChain.defaultProps = {\n  assets: []\n};\n\nexport default RBSupplyChain;\n","import React, { Component } from 'react';\nimport '../styles/rb-story-explorer.scss';\n\nclass RBStoryExplorer extends Component {\n  getStorySelection(stories, selectedLocation) {\n    return selectedLocation ?\n      stories\n        .filter((story) => { return story.locationName.toLowerCase() === selectedLocation; }) \n        .slice(0, 10) :\n      stories.slice(0, 10);\n\n  }\n\n  renderFilteredStories(props=this.props) {\n    const {stories, selectedLocation} = props;\n    const filteredStories = this.getStorySelection(stories, selectedLocation)\n    return filteredStories.map((story, i) => {\n      return (\n        <li key={i}><span className=\"rb-capitalize\">{story.location}</span> Story {i + 1}: {story.text}</li>\n      );\n    })\n  }\n\n  render() {\n    const {stories, selectedLocation} = this.props;\n    return (\n      <div className=\"rb-story-explorer-wrapper\">\n        <div className=\"rb-story-list\">\n          <h1>Story List</h1>\n          <ul>\n            {this.renderFilteredStories()}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nRBStoryExplorer.defaultProps = {\n  stories: [],\n  selectedLocation: ''\n};\n\nexport default RBStoryExplorer;\n","import React, { Component } from 'react';\nimport RBMap from './components/rb-map.js';\nimport RBSupplyChain from './components/rb-supply-chain.js';\nimport RBStoryExplorer from './components/rb-story-explorer.js';\nimport { Grid, Row, Col } from 'react-flexbox-grid';\nimport supplyChainData from './data/supply-chain-data.json';\nimport storiesData from './data/stories.json';\nimport { transformStoryData } from './lib/helpers.js';\nimport './App.scss';\n\nconst {assets} = supplyChainData;\nconst stories = transformStoryData(storiesData);\nconsole.log(stories);\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"RBApp\">\n        <h1 className=\"rb-title\">Risk Board</h1>\n        <RBMap assets={assets}/>\n        <Grid fluid>\n          <Row>\n            <Col lg={4}>\n              <RBSupplyChain assets={assets} />\n            </Col>\n            <Col lg={8}>\n              <RBStoryExplorer stories={stories} />\n            </Col>\n          </Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","function flatten(input) {\n  const stack = [...input];\n  const res = [];\n  while (stack.length) {\n    // pop value from stack\n    const next = stack.pop();\n    if (Array.isArray(next)) {\n      // push back array items, won't modify the original input\n      stack.push(...next);\n    } else {\n      res.push(next);\n    }\n  }\n  //reverse to restore input order\n  return res.reverse();\n}\n\n// Return flat array of stories and include the location as a key on each story\n// order by score, ascending (most negative stories first)\nexport function transformStoryData(storyData) {\n  const {stories} = storyData;\n  const flatStories = [];\n  Object.keys(stories).forEach((k) => {\n    flatten(stories[k]).forEach((story) => {\n      const modifiedStory = Object.assign({}, story, {location: k})\n      flatStories.push(modifiedStory)\n    })\n  })\n  const sortedFlatStories = \n    flatStories.sort((a, b) => {\n      if (a.score < b.score) {\n        return -1;\n      }\n      if (a.score > b.score) {\n        return 1;\n      }\n      return 0;\n    })\n  return sortedFlatStories;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}